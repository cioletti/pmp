<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2008/08/03/using-google-maps-in-a-flex-project/ -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				verticalAlign="middle"
				backgroundColor="white"
				creationComplete="init();">
	
	<mx:Script>
		<![CDATA[
			import bean.PlMaquinaBean;
			
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapType;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.controls.ZoomControlOptions;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.services.GeocodingResponse;
			import com.google.maps.services.Placemark;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			
			import util.ProgressBarHelper;
			
			private var googleMap:Map;
			private var geocoder:ClientGeocoder;
			public var urlLogin:String = "";
			private var plMaquinaList:ArrayCollection = new ArrayCollection(); 
			
			private function init():void {
//				googleMap = new Map();
//				googleMap.key = "ABQIAAAAgsP8V7pK-3BuDIQZTJRCuhTAElYqh_bcrIqMhvmHnle99ajmaRSYL3fowWoTbR71JSyWFOUdhl3bKw";
//				googleMap.addEventListener(MapEvent.MAP_READY, googleMap_mapReady);
//				googleMap.setSize(new Point(mapContainer.width, mapContainer.height));
//				googleMap.addControl(new ZoomControl());
//				googleMap.addControl(new MapTypeControl());
//				googleMap.sensor = "true";
//				
//				mapContainer.addChild(googleMap);
				
			}
	
			private var endArr:Array = null;
			private function geocoder_geocodingSuccess(evt:GeocodingEvent):void {
				var p:Array = evt.response.placemarks;
				endArr[index] = p[0].address;
				index++;
			}
			
			private function geocoder_geocodingFailure(evt:GeocodingEvent):void {
				index++;
			}
			
			private function googleMap_mapReady(evt:MapEvent):void {
				geocoder = new ClientGeocoder();
				//geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS, geocoder_geocodingSuccess);
				//geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE, geocoder_geocodingFailure);
				googleMap.setCenter(new LatLng(-3.875946,-38.627930), 7, MapType.HYBRID_MAP_TYPE);
				serviceController.findAllMaquinaPl();
				
				//geocoder.geocode(textInput.text);
			}
			
			private function onMapClick(event:MapMouseEvent):void{
				geocoder.reverseGeocode(event.latLng);
				geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS,
					function(e:GeocodingEvent):void {
						var placemarks:Array = e.response.placemarks;
						googleMap.openInfoWindow(event.latLng, new InfoWindowOptions( { title:
							"Address Information :", content: placemarks[0].address }));
					}
				);
			} 
			
			[Embed(source="img/logo.png")] private var purpleIcon:Class
			[Embed(source="img/camera.png")] private var cameraIcon:Class
			private var index:int = 0;
			private function populateMap():void {
				//geocoder.geocode(textInput.text);
				var markerOptions:MarkerOptions = new MarkerOptions();
			
//				markerOptions.icon = new purpleIcon();
//				markerOptions.tooltip = "Purple";
//				markerOptions.iconAlignment = MarkerOptions.ALIGN_HORIZONTAL_CENTER;
//				markerOptions.iconOffset = new Point(2, 2);
				
				//googleMap.setCenter(new LatLng(40.736072,-73.992062), 14, MapType.NORMAL_MAP_TYPE);
				

				for(var i:int = 0; i < plMaquinaList.length; i++){
					var pl:PlMaquinaBean = PlMaquinaBean(plMaquinaList.getItemAt(i));
//					if(pl.latitude != null){
//						geocoder.reverseGeocode(new LatLng(Number(pl.latitude),Number(pl.longitude)));
//					}
					markerOptions.tooltip = pl.descricao;
					var marker:Marker = new Marker(new LatLng(Number(pl.latitude),Number(pl.longitude)), markerOptions);
					marker.addEventListener(MapMouseEvent.CLICK, onMapClick);
					googleMap.addOverlay(marker);
					
					
				}
//				markerOptions.tooltip = "teste 2";
//				markerOptions.icon = new cameraIcon();
//				marker = new Marker(new LatLng(40.736072,-73.994870), markerOptions);
//				
//				googleMap.addOverlay(marker);
//				var marker:Marker = new Marker(new LatLng(40.736072,-74.992062), markerOptions);
//				googleMap.addOverlay(marker);
				
			}
			
			private function mapContainer_resize(evt:ResizeEvent):void {
				if (googleMap) {
					googleMap.setSize(new Point(mapContainer.width, mapContainer.height));
				}
			}
			
			private function click_button():void{
				if(serieText.text != ''){
					serviceController.findAllMaquinaPlByName(serieText.text);
				}else{
					Alert.show("O número de série é obrigatório!", "Alerta");
				}
			}
			
			private function onResultFindAllMaquinaPl(event:ResultEvent):void{
				plMaquinaList = ArrayCollection(event.result);
				endArr = new Array(plMaquinaList.length);
//				for(var j:int = 0; j < plMaquinaList.length; j++){
//					var pl:PlMaquinaBean = PlMaquinaBean(plMaquinaList.getItemAt(j));
//					geocoder.reverseGeocode(new LatLng(Number(pl.latitude),Number(pl.longitude)));
//				}	
				this.populateMap();
			}
			private function onResultFindAllMaquinaPlByName(event:ResultEvent):void{
				if(event.result != null){
					var pl:PlMaquinaBean = PlMaquinaBean(event.result);
					googleMap.setCenter(new LatLng(Number(pl.latitude),Number(pl.longitude)), 15, MapType.HYBRID_MAP_TYPE);
				}else{
					Alert.show("Não existe essa máquina!", "Alerta");
				}
			}
			private function onResultReadMaquinaPlJob(event:ResultEvent):void{
				if(event.result != null){
					Alert.show("Executou com Sucesso!", "Alerta");					
				}
				
			}
			
			private function readMaquinaPlJob():void{
				serviceController.readMaquinaPlJob();
			}
			
		]]>
	</mx:Script>
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="{ProgressBarHelper.erro(event,urlLogin);ProgressBarHelper.removeProgressBar();}">
		<mx:method name="findAllMaquinaPl" result="onResultFindAllMaquinaPl(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllMaquinaPlByName" result="onResultFindAllMaquinaPlByName(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="readMaquinaPlJob" result="onResultReadMaquinaPlJob(event);ProgressBarHelper.removeProgressBar()" />
	</mx:RemoteObject>
	
	
	<mx:ApplicationControlBar dock="true">
		<mx:Form styleName="plain">
			<mx:FormItem label="Nº Série:"
						 direction="horizontal">
				<mx:TextInput id="serieText"
							  text="" />
				<mx:Button id="button"
						   label="Submit"
						   click="readMaquinaPlJob()" />
			</mx:FormItem>
		</mx:Form>
	</mx:ApplicationControlBar>
	
	<mx:UIComponent id="mapContainer"
					width="100%"
					height="100%"
					resize="mapContainer_resize(event);" />
	
</mx:Application>